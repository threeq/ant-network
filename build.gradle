buildscript {
	ext {
        springBootVersion = '2.0.0.RELEASE'
	}
	repositories {
		mavenCentral()
        jcenter()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
        maven { url "http://repo.spring.io/libs-snapshot-local" }
	}
	dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath('se.transmode.gradle:gradle-docker:1.2')
        classpath("io.spring.gradle:dependency-management-plugin:1.0.4.RELEASE")
	}
}

group = 'ant-network'
version = '0.0.1-SNAPSHOT'
description = "呵呵呵"

allprojects {
	apply plugin: 'java'
	apply plugin: 'idea'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url 'https://repo.spring.io/release/' }
        maven { url 'https://repo.spring.io/libs-milestone' }
        maven { url "http://repo.spring.io/libs-snapshot-local" }
        maven { url "http://repo.spring.io/libs-milestone-local" }
        maven { url "http://repo.spring.io/libs-release-local" }
    }

    ext {
        springCloudVersion = 'Finchley.M8'
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

	configurations {
//	all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
//	all*.exclude group: 'io.netty'
	}

	dependencies {
        compileOnly('org.projectlombok:lombok')
	}
}

/**
 * 定义项目依赖关系
 * common <--- test <------------
 *    ^		    ^               |
 *    |         |               |
 *	  ---------core <----- <其他业务子工程>
 *
 */
project(':ant-network-libs-test') {
	dependencies {
		compile(
				project(":ant-network-libs-common")
		)
	}
}
project(':ant-network-libs-core') {
	dependencies {
		compile(
				project(":ant-network-libs-common")
		)
		testCompile(
				project(":ant-network-libs-test")
		)
	}
}
configure(subprojects.findAll {
	![
			'ant-network-libs-core',
			'ant-network-libs-common',
			'ant-network-libs-test'
	].contains(it.name)
}) {
	apply plugin: 'docker'

	task buildDocker(type: Docker, dependsOn: build) {
		push = false
		applicationName = jar.baseName
		dockerfile = file('src/main/docker/Dockerfile')
		doFirst {
			copy {
				from jar
				into stageDir
			}
		}
	}

	dependencies {
		compile(
				project(":ant-network-libs-common"),
				project(":ant-network-libs-core")
		)
		testCompile(
				project(":ant-network-libs-test")
		)
	}
}

